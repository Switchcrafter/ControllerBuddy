plugins {
    id 'application'
    id 'eclipse'
    id 'org.ajoberstar.grgit' version '3.1.1'
}

mainClassName = 'de.bwravencl.controllerbuddy.gui.Main'
version = "${org.ajoberstar.grgit.Grgit.open(dir: projectDir).describe(longDescr: true).replaceFirst(java.util.regex.Pattern.quote('-'), '.').replaceFirst(java.util.regex.Pattern.quote('-g'), '-')}"

sourceCompatibility = 13
targetCompatibility = 13

ext {
    jnaVersion = '5.4.0'
    lwjglVersion = '3.2.3'

    genDir = 'gen'
    versionDir = "$genDir/main/java"

    libsDir = "$buildDir/$libsDirName"
    tmpDir = "$buildDir/tmp"
    appImageDir = "$tmpDir/$project.name"
    runtimeDir = "$tmpDir/runtime"
}

repositories {
    mavenCentral()
    maven { url 'https://raw.github.com/bitcoin-solutions/mbhd-maven/master/snapshots' }
}

dependencies {
    implementation 'commons-cli:commons-cli:1.4',
                   'com.formdev:flatlaf:0.17',
                   'com.google.code.gson:gson:2.8.6',
                   'io.github.classgraph:classgraph:4.8.53',
                   "net.java.dev.jna:jna:$jnaVersion",
                   "net.java.dev.jna:jna-platform:$jnaVersion",
                   'org.hid4java:hid4java:develop-SNAPSHOT',
                   "org.lwjgl:lwjgl:$lwjglVersion",
                   "org.lwjgl:lwjgl-glfw:$lwjglVersion",
                   "org.lwjgl:lwjgl-opengl:$lwjglVersion",
                   "org.lwjgl:lwjgl-openvr:$lwjglVersion"
    runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:natives-linux",
                "org.lwjgl:lwjgl:$lwjglVersion:natives-macos",
                "org.lwjgl:lwjgl:$lwjglVersion:natives-windows",
                "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-linux",
                "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-macos",
                "org.lwjgl:lwjgl-glfw:$lwjglVersion:natives-windows",
                "org.lwjgl:lwjgl-opengl:$lwjglVersion:natives-windows",
                "org.lwjgl:lwjgl-openvr:$lwjglVersion:natives-windows"
}

task cleanGenDirectory {
    description = 'Removes the \'gen\' directory'
    doLast { delete genDir }
}

clean.dependsOn cleanGenDirectory

task generateVersion {
    description = 'Creates a source directory named \'gen\' and inside it generates a source file that defines a version string. Also removes any preexisting gen directory.'
    dependsOn cleanGenDirectory
    def outputDir = file("$versionDir")
    outputs.dir outputDir
    doLast {
        def srcFile = new File(outputDir, "de/bwravencl/controllerbuddy/version/Version.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""package de.bwravencl.controllerbuddy.version;\n
public class Version {

\tpublic static final String VERSION = "$project.version";

}
""")
    }
}

tasks.eclipse.dependsOn generateVersion

eclipse {
    classpath {
        file {
            whenMerged { cp ->
                cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder("$versionDir", null) )
            }
        }
    }
}

compileJava {
    dependsOn generateVersion
    source generateVersion.outputs.files, sourceSets.main.java
    options.compilerArgs += ["-Xlint:deprecation"]
}

task jlink(type: Exec) {
    description = 'Executes the jlink command to create a customized minimal Java runtime inside the build directory. Also removes any preexisting runtime in the same directory.'
    group
    doFirst { delete runtimeDir }
    commandLine 'jlink', '--output', "$runtimeDir", '--strip-debug', '--no-header-files', '--no-man-pages', '--strip-native-commands', '--bind-services', '--add-modules', 'java.desktop,java.sql,jdk.unsupported'
}

task copyLibs(type: Copy) {
    description = 'Copies all jar files into a directory called \'libs\' inside the build directory.'
    dependsOn jar
    from configurations.runtimeClasspath
    into "$libsDir"
}

task customizeLoggingProperties {
    description = 'Alters the default "logging.properties" configuration file of the Java runtime to include a FileHandler that logs to a logfile in the system\'s TEMP directory using SimpleFormatter with custom formatting.'
    dependsOn jlink
    doLast {
        ant.propertyfile(file: "$runtimeDir/conf/logging.properties") {
            entry(key: 'handlers', value: 'java.util.logging.FileHandler, java.util.logging.ConsoleHandler')
            entry(key: 'java.util.logging.FileHandler.pattern', value: "%t/${project.name}.log")
            entry(key: 'java.util.logging.FileHandler.formatter', value: 'java.util.logging.SimpleFormatter')
            entry(key: 'java.util.logging.SimpleFormatter.format', value: '[%1$tY-%1$tm-%1$td %1$tk:%1$tM:%1$tS:%1$tL] %3$s: %5$s%6$s%n')
        }
    }
}

task jpackage(type: Exec) {
    description = 'Executes the jpackage command to create a standalone application image packaged with a custom minimal Java runtime.'
    dependsOn copyLibs, customizeLoggingProperties
    doFirst { delete "$appImageDir" }
    commandLine 'jpackage', '--input', "$libsDir", '--dest', "$tmpDir", '--package-type', 'app-image', '--name', "$project.name", '--runtime-image', "$runtimeDir", '--main-class', "$mainClassName", '--main-jar', "${project.name}-${version}.jar", '--app-version', "$version", '--icon', "$projectDir/icon.ico", '--copyright', "Copyright ${new Date().format('yyyy')} Matteo Hausner", '--vendor', 'Matteo Hausner', '--verbose'
}

startScripts.enabled = false
distTar.enabled = false

task distZip(type: Zip, overwrite: true) {
    dependsOn jpackage
    from "$tmpDir"
    include "$project.name/**"
}

task installDist(type: Sync, overwrite: true) {
    dependsOn jpackage
    from "$tmpDir"
    into "$buildDir/install"
    include "$project.name/**"
}
